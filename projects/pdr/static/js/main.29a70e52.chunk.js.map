{"version":3,"sources":["components/Button.js","components/TopBar.js","components/Square.js","view/Frame/Frame.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","_setNewProps","width","state","console","log","setState","_onClick","isTimeoutActivated","onClick","buttonStyle","pressedButtonStyle","timeoutButton","setTimeout","unpressedButtonStyle","margin","color","height","this","clearTimeout","className","style","React","Component","TopBar","addButton","Square","_getWindowClassName","_handleMouseDown","e","isOverCloseButton","_closeWindow","onFocus","id","isWindowMoving","windowPosition","left","clientX","top","clientY","_handleMouseUp","_handleMouseOut","_setBorderLimit","borderLimit","_getTopBarColor","closeWindow","_onMouseOverCloseButton","_onMouseLeaveCloseButton","_getWindowsStyle","movingStyle","size","initialPosition","position","newX","movementX","movementY","newY","onMouseMove","_onMouseMove","bind","onMouseDown","onMouseUp","onMouseOut","onMouseOver","onMouseLeave","Frame","_renderTopBar","isLoading","frame","_renderNewWindows","_getRandomInteger","min","max","Math","floor","random","_getWindowColor","windows","filter","value","_bringToTopView","length","element","find","splice","maxWindowsNbr","tempWindows","concat","windowsCreated","key","_renderWindows","updateWindowDimensions","mousePos","x","y","window","addEventListener","removeEventListener","innerWidth","innerHeight","screenX","screenY","App","flex","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29a70e52.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MdAddCircleOutline } from 'react-icons/md';\r\nimport './Button.css';\r\n\r\nexport default class Button extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { width } = this.props;\r\n    const unpressedButtonStyle = {\r\n      margin: 5,\r\n      color: 'rgb(255,255,255)',\r\n    };\r\n    const pressedButtonStyle = {\r\n      margin: 5,\r\n      color: 'rgba(255,255,255,0.5)',\r\n    };\r\n    this.state = {\r\n      height: 60,\r\n      width: width,\r\n      isTimeoutActivated: false,\r\n      unpressedButtonStyle,\r\n      pressedButtonStyle,\r\n      buttonStyle: unpressedButtonStyle,\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.timeoutButton = 0;\r\n  }\r\n\r\n  componentWillUpdate() {\r\n    const { width } = this.props;\r\n    this._setNewProps(width);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeoutButton);\r\n    this.timeoutButton = 0;\r\n  }\r\n\r\n  _setNewProps = width => {\r\n    if (this.state.width !== width) {\r\n      console.log(this.state.width, ' ', width);\r\n      this.setState({ width: width });\r\n    }\r\n  };\r\n\r\n  _onClick = () => {\r\n    if (!this.state.isTimeoutActivated) {\r\n      this.props.onClick();\r\n      this.setState({\r\n        isTimeoutActivated: true,\r\n        buttonStyle: this.state.pressedButtonStyle,\r\n      });\r\n      this.timeoutButton = setTimeout(() => {\r\n        this.setState({\r\n          isTimeoutActivated: false,\r\n          buttonStyle: this.state.unpressedButtonStyle,\r\n        });\r\n      }, 250);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"buttonDiv\">\r\n        <MdAddCircleOutline\r\n          className=\"icon\"\r\n          style={this.state.buttonStyle}\r\n          onClick={this._onClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './TopBar.css';\r\nimport Button from './Button';\r\n\r\nexport default class TopBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { width } = this.props;\r\n    this.state = {\r\n      height: 45,\r\n      width: width,\r\n    };\r\n  }\r\n\r\n  componentWillUpdate() {\r\n    const { width } = this.props;\r\n    this._setNewProps(width);\r\n  }\r\n\r\n  _setNewProps = width => {\r\n    if (this.state.width !== width) {\r\n      console.log(this.state.width, ' ', width);\r\n      this.setState({ width: width });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { height, width } = this.state;\r\n    const style = {\r\n      height,\r\n      width,\r\n    };\r\n    return (\r\n      <div className={'menuBar'} style={style}>\r\n        <Button onClick={this.props.addButton} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Square.css';\r\nimport { IoIosClose } from 'react-icons/io';\r\n\r\nexport default class Square extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { id, color, size, borderLimit } = props;\r\n    const initialPosition = {\r\n      position: 'absolute',\r\n      left: borderLimit.width / 2,\r\n      top: borderLimit.height / 2,\r\n      width: 300,\r\n      height: 300,\r\n    };\r\n    const movingStyle = {\r\n      position: 'relative',\r\n      width: 150,\r\n      height: 150,\r\n    };\r\n\r\n    this.state = {\r\n      id,\r\n      movingStyle,\r\n      borderLimit,\r\n      color,\r\n      size,\r\n      initialPosition,\r\n      windowPosition: initialPosition,\r\n      isWindowMoving: false,\r\n      isOverCloseButton: false,\r\n    };\r\n  }\r\n\r\n  componentWillUpdate() {\r\n    const { borderLimit } = this.props;\r\n    this._setBorderLimit(borderLimit);\r\n  }\r\n\r\n  _getWindowClassName = () => {\r\n    return `${this.state.color}`;\r\n  };\r\n\r\n  _onMouseMove(e) {\r\n    if (this.state.isWindowMoving) {\r\n      const { left, top } = this.state.windowPosition;\r\n      const { movementX, movementY } = e;\r\n      let newX,\r\n        newY = 0;\r\n\r\n      if (left + movementX < 0) {\r\n        newX = 0;\r\n      } else {\r\n        newX = left + movementX;\r\n      }\r\n\r\n      if (top + movementY < 0) {\r\n        newY = 0;\r\n      } else {\r\n        newY = top + movementY;\r\n      }\r\n\r\n      this.setState({\r\n        windowPosition: {\r\n          ...this.state.windowPosition,\r\n          left: newX,\r\n          top: newY,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  _handleMouseDown = e => {\r\n    if (this.state.isOverCloseButton) {\r\n      this._closeWindow();\r\n    } else {\r\n      this.props.onFocus(this.state.id);\r\n\r\n      this.setState({\r\n        isWindowMoving: true,\r\n      });\r\n\r\n      this.setState({\r\n        windowPosition: {\r\n          ...this.state.windowPosition,\r\n          left: e.clientX - 75,\r\n          top: e.clientY - 110,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle do movimento\r\n  _handleMouseUp = e => {\r\n    console.log('teste');\r\n    this.setState({\r\n      windowPosition: {\r\n        ...this.state.windowPosition,\r\n        left: e.clientX - 110,\r\n        top: e.clientY - 75,\r\n      },\r\n      isWindowMoving: false,\r\n    });\r\n  };\r\n\r\n  _handleMouseOut = e => {\r\n    this.setState({\r\n      isWindowMoving: false,\r\n    });\r\n  };\r\n\r\n  _setBorderLimit = borderLimit => {\r\n    if (\r\n      this.state.borderLimit.width !== borderLimit.width ||\r\n      this.state.borderLimit.height !== borderLimit.height\r\n    ) {\r\n      this.setState({ borderLimit });\r\n    }\r\n  };\r\n\r\n  _getTopBarColor = () => `${this.state.color}-topbar`;\r\n\r\n  _closeWindow = () => {\r\n    this.props.closeWindow(this.state.id);\r\n  };\r\n\r\n  _onMouseOverCloseButton = () => this.setState({ isOverCloseButton: true });\r\n\r\n  _onMouseLeaveCloseButton = () => this.setState({ isOverCloseButton: false });\r\n\r\n  _getWindowsStyle = () => {\r\n    if (this.state.isWindowMoving) {\r\n      return { ...this.state.windowPosition, ...this.state.movingStyle };\r\n    }\r\n    return this.state.windowPosition;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`square ${this._getWindowClassName()}`}\r\n        style={this._getWindowsStyle()}\r\n        onMouseMove={this._onMouseMove.bind(this)}\r\n        onMouseDown={this._handleMouseDown}\r\n        onMouseUp={this._handleMouseUp}\r\n        onMouseOut={this._handleMouseOut}\r\n      >\r\n        <div className={`topBar ${this._getTopBarColor()}`}>\r\n          <div>\r\n            <IoIosClose\r\n              className=\"closeButton\"\r\n              onClick={this._closeWindow}\r\n              onMouseOver={this._onMouseOverCloseButton}\r\n              onMouseLeave={this._onMouseLeaveCloseButton}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Frame.css';\r\nimport TopBar from '../../components/TopBar';\r\nimport Square from '../../components/Square';\r\n\r\nexport default class Frame extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const mousePos = {\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n\r\n    this.state = {\r\n      frame: {\r\n        width: 0,\r\n        height: 0,\r\n      },\r\n      mousePos,\r\n      isLoading: false,\r\n      windows: [],\r\n      maxWindowsNbr: 10,\r\n      windowsCreated: 0,\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({ isLoading: true });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n    this.setState({ isLoading: false });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    this.setState({\r\n      frame: {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      },\r\n    });\r\n  }\r\n\r\n  _onMouseMove(e) {\r\n    this.setState({ mousePos: { x: e.screenX, y: e.screenY } });\r\n  }\r\n\r\n  _renderTopBar = () => {\r\n    if (!this.state.isLoading) {\r\n      return (\r\n        <TopBar\r\n          width={this.state.frame.width}\r\n          addButton={this._renderNewWindows}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  _getRandomInteger = (min, max) =>\r\n    Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  _getWindowColor = () => {\r\n    const colorNbr = this._getRandomInteger(0, 5);\r\n\r\n    switch (colorNbr) {\r\n      case 0:\r\n        return 'red';\r\n      case 1:\r\n        return 'green';\r\n      case 2:\r\n        return 'purple';\r\n      case 3:\r\n        return 'yellow';\r\n      default:\r\n        return 'blue';\r\n    }\r\n  };\r\n\r\n  _closeWindow = id => {\r\n    const windows = this.state.windows.filter(value => value.props.id !== id);\r\n    this.setState({ windows });\r\n  };\r\n\r\n  _bringToTopView = id => {\r\n    if (this.state.windows[this.state.windows.length - 1].props.id !== id) {\r\n      const element = this.state.windows.find(value => value.props.id === id);\r\n      let windows = this.state.windows.filter(\r\n        value => value.props.id !== element.props.id\r\n      );\r\n      windows.splice(this.state.windows.length - 1, 0, element);\r\n      this.setState({ windows });\r\n    }\r\n  };\r\n\r\n  _renderNewWindows = () => {\r\n    if (this.state.windows.length < this.state.maxWindowsNbr) {\r\n      const tempWindows = this.state.windows.concat(\r\n        <Square\r\n          id={this.state.windowsCreated}\r\n          key={this.state.windowsCreated}\r\n          borderLimit={this.state.frame}\r\n          color={this._getWindowColor()}\r\n          closeWindow={this._closeWindow}\r\n          size=\"large\"\r\n          onFocus={this._bringToTopView}\r\n        />\r\n      );\r\n      this.setState({\r\n        windows: tempWindows,\r\n        windowsCreated: this.state.windowsCreated + 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  _renderWindows = () => this.state.windows;\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"detectArea noselect\"\r\n        onMouseMove={this._onMouseMove.bind(this)}\r\n        style={this.state.frame}\r\n      >\r\n        {this._renderTopBar()}\r\n        {this._renderWindows()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Frame from './view/Frame/Frame';\r\n\r\nfunction App() {\r\n  return <Frame className=\"App\" style={{ flex: 1 }} />;\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}